"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import certifi
from google.oauth2 import service_account
import base64
import json
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv() 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =  False

ALLOWED_HOSTS = ['*'] #Remember to change


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",    
    "api",
    'storages'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",    
]

ROOT_URLCONF = "setup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "setup.wsgi.application"


#Security for framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES':(
        #'rest_framework.permissions.IsAuthenticated',), 
        'rest_framework.permissions.AllowAny',),
}

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#DATABASES = {
#    "default": {
#        "ENGINE": "django.db.backends.sqlite3",
#        "NAME": BASE_DIR / "db.sqlite3",
#    }
#}

# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',
#         'NAME':  os.getenv('MONGODB_NAME'), # name
#         'ENFORCE_SCHEMA': False,  # Set to True if you want to enforce schema
#         'CLIENT': {
#             'host': os.getenv('MONGODB_HOST'),#
#             'username': os.getenv('MONGODB_USERNAME'),  # dont use username for windows conflict
#             'password': os.getenv('MONGODB_PASSWORD'),  # 
#             'authSource': 'admin',  # default
#             'authMechanism': 'SCRAM-SHA-1',  # default could to 256 for azure
#             'ssl': True,
#             'tlsCAFile': certifi.where(),
#         }
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'sslmode': 'require',
            'sslcert': os.path.join(BASE_DIR, 'certs', 'client-cert.pem'),
            'sslkey': os.path.join(BASE_DIR, 'certs', 'client-key.pem'),
            'sslrootcert': os.path.join(BASE_DIR, 'certs', 'server-ca.pem'),
        },
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': "redis://{os.getenv('REDIS_IP')}:6379/1",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'myapp',
    }
}

# Optional: if you want to use caching for session data
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

GS_BUCKET_NAME = os.getenv("GS_BUCKET_NAME")
GS_PROJECT_ID = os.getenv("GS_PROJECT_ID")
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"

# Decode the base64 string to get the JSON content
service_account_json_base64 = os.getenv('GOOGLE_CLOUD_SERVICE_ACCOUNT_JSON_BASE64')
service_account_json = base64.b64decode(service_account_json_base64).decode('utf-8')
# Load the JSON content into a dictionary
service_account_info = json.loads(service_account_json)
# Create credentials using the service account file
GS_CREDENTIALS = service_account.Credentials.from_service_account_info(service_account_info)
# URL to use when referring to static files located in GCS
STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
# URL to use when referring to static files located in GCS
STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'

#STATIC_URL = "static/"
#STATICFILE_DIRS = [
#    os.path.join(BASE_DIR,"static"),
#] 
#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')# 
#MEDIA_URL = "media/"
#MEDIA_ROOT = os.path.join(BASE_DIR,'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#Cors authorization

CORS_ALLOW_ALL_ORIGINS = True #This is a security risk
CORS_ALLOW_HEADERS = [
    'Accept-Language',  # Add accept-language to the list of allowed headers
    'Authorization',
    'Content-Type',
    'User-Agent',
    # Add any other headers you want to allow here
]

# Security settings
#SECURE_SSL_REDIRECT = True
#SESSION_COOKIE_SECURE = True
#CSRF_COOKIE_SECURE = True
#SECURE_HSTS_SECONDS = 3600
#SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#SECURE_HSTS_PRELOAD = True
