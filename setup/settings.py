"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
#import certifi
from google.oauth2 import service_account
import base64
import json
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv() 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str(os.getenv('DEBUG', 'True')).lower() == 'true'

ALLOWED_HOSTS = ['*'] #Remember to change


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",    
    "api",
    "storages",
    "channels",
    "django_celery_results",
    "django_celery_beat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",  
]

ROOT_URLCONF = "setup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "setup.asgi.application"  # Assuming your project is named 'setup'
#WSGI_APPLICATION = "setup.wsgi.application"

#Security for framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES':(
        #'rest_framework.permissions.IsAuthenticated',), 
        'rest_framework.permissions.AllowAny',),
}


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

#DATABASES = {
#    "default": {
#        "ENGINE": "django.db.backends.sqlite3",
#        "NAME": BASE_DIR / "db.sqlite3",
#    }
#}

# DATABASES = {
#     'default': {
#         'ENGINE': 'djongo',
#         'NAME':  os.getenv('MONGODB_NAME'), # name
#         'ENFORCE_SCHEMA': False,  # Set to True if you want to enforce schema
#         'CLIENT': {
#             'host': os.getenv('MONGODB_HOST'),#
#             'username': os.getenv('MONGODB_USERNAME'),  # dont use username for windows conflict
#             'password': os.getenv('MONGODB_PASSWORD'),  # 
#             'authSource': 'admin',  # default
#             'authMechanism': 'SCRAM-SHA-1',  # default could to 256 for azure
#             'ssl': True,
#             'tlsCAFile': certifi.where(),
#         }
#     }
# }

if DEBUG:
    # 1) PostgreSQL (lokal)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME":     os.getenv("LOCAL_DB_NAME",  "mydb"),
            "USER":     os.getenv("LOCAL_DB_USER",  "postgres"),
            "PASSWORD": os.getenv("LOCAL_DB_PASS",  "postgres"),
            "HOST":     os.getenv("LOCAL_DB_HOST",  "127.0.0.1"),
            "PORT":     os.getenv("LOCAL_DB_PORT",  "5432"),
        }
    }

    # 2) Redis – Channel-Layer für WebSockets
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG":  {"hosts": ["redis://127.0.0.1:6379/0"],
                        "prefix": "myapp"},   # optional
        }
    }

    # 3) Redis – Django-Cache (Sessions, Caching API …)
    CACHES = {
        "default": {
            "BACKEND":  "django_redis.cache.RedisCache",
            "LOCATION": "redis://127.0.0.1:6379/1",
            "OPTIONS":  {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
            "KEY_PREFIX": "myapp",
        }
    }

    # 4) Statisches & Medien lokal halten
    STATIC_URL   = "static/"
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
    STATIC_ROOT  = os.path.join(BASE_DIR, "staticfiles")
    MEDIA_URL    = "media/"
    MEDIA_ROOT   = os.path.join(BASE_DIR, "media")

    # Celery Configuration (Development)
    CELERY_BROKER_URL = "redis://127.0.0.1:6379/2" # Separate Redis DB for Celery
    CELERY_RESULT_BACKEND = "django-db" # Using django-celery-results
    CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
    CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
    DEFAULT_FILE_STORAGE  = "django.core.files.storage.FileSystemStorage"
    STATICFILES_STORAGE   = "django.contrib.staticfiles.storage.StaticFilesStorage"

    # Kafka Configuration (Development)
    KAFKA_BOOTSTRAP_SERVERS = os.getenv('LOCAL_KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092')
    # Add other Kafka client configurations for local development if needed (e.g., security_protocol).
else:
    # Production settings
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'OPTIONS': {
                'sslmode': 'require',
                'sslcert': os.path.join(BASE_DIR, 'certs', 'client-cert.pem'),
                'sslkey': os.path.join(BASE_DIR, 'certs', 'client-key.pem'),
                'sslrootcert': os.path.join(BASE_DIR, 'certs', 'server-ca.pem'),
            },
        }
    }

    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [f"redis://{os.getenv('REDIS_IP')}:6379/0"],
                "prefix": "myapp",  # optional
            },
        },
    }

    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f"redis://{os.getenv('REDIS_IP')}:6379/1",
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'KEY_PREFIX': 'myapp',
        }
    }

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/

    GS_BUCKET_NAME = os.getenv("GS_BUCKET_NAME")
    GS_PROJECT_ID = os.getenv("GS_PROJECT_ID")
    DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"

    # Decode the base64 string to get the JSON content
    service_account_json_base64 = os.getenv('GOOGLE_CLOUD_SERVICE_ACCOUNT_JSON_BASE64')
    service_account_json = base64.b64decode(service_account_json_base64).decode('utf-8')
    # Load the JSON content into a dictionary
    service_account_info = json.loads(service_account_json)
    # Create credentials using the service account file
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(service_account_info)
    # URL to use when referring to static files located in GCS
    #STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
    # URL to use when referring to static files located in GCS
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'

    # Celery Configuration (Production)
    CELERY_BROKER_URL = f"redis://{os.getenv('REDIS_IP')}:6379/2" # Separate Redis DB for Celery
    CELERY_RESULT_BACKEND = "django-db" # Using django-celery-results
    CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
    CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

    # Kafka Configuration (Production)
    KAFKA_BOOTSTRAP_SERVERS = os.getenv('PROD_KAFKA_BOOTSTRAP_SERVERS') # e.g., 'broker1:9093,broker2:9093'
    # Ensure PROD_KAFKA_BOOTSTRAP_SERVERS is set in your production environment.
    # For production, you'll likely need to configure security settings:
    # KAFKA_SECURITY_PROTOCOL = os.getenv('PROD_KAFKA_SECURITY_PROTOCOL', 'SASL_SSL')
    # KAFKA_SASL_MECHANISM = os.getenv('PROD_KAFKA_SASL_MECHANISM', 'PLAIN')
    # KAFKA_SASL_PLAIN_USERNAME = os.getenv('PROD_KAFKA_SASL_PLAIN_USERNAME')
    # KAFKA_SASL_PLAIN_PASSWORD = os.getenv('PROD_KAFKA_SASL_PLAIN_PASSWORD')
    # Security settings
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
# Optional: if you want to use caching for session data
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#Cors authorization

CORS_ALLOW_ALL_ORIGINS = True #This is a security risk
CORS_ALLOW_HEADERS = [
    'Accept-Language',  # Add accept-language to the list of allowed headers
    'Authorization',
    'Content-Type',
    'User-Agent',
    # Add any other headers you want to allow here
]


